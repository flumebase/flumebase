#!/bin/bash
#
# Licensed to Odiago, Inc. under one or more contributor license
# agreements.  See the NOTICE.txt file distributed with this work for
# additional information regarding copyright ownership.  Odiago, Inc.
# licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#

follow_one() {
  # Resolve symlinks and relative path components along a path.  This requires
  # its argument to be an absolute path.  This does not recursively re-resolve
  # symlinks; if that is required, use the 'follow' method.

  target=$1
  OIFS=$IFS
  IFS='/'

  # Taking each dir component along the way, build up a new target directory,
  # resolving '.', '..', and symlinks.
  newtarget=''
  for part in ${target}; do
    if [ -z "${part}" ]; then
      continue # Empty dir part. 'foo//bar'
    elif [ "." == "${part}" ]; then
      continue # Nothing special to do for '.'
    elif  [ ".." == "${part}" ]; then
      IFS=$OIFS
      newtarget=`dirname ${newtarget}` # pop a component.
    elif [ -h "${newtarget}/${part}" ]; then
      IFS=$OIFS
      link=`readlink ${newtarget}/${part}`
      # links can be relative or absolute. Relative ones get appended to
      # newtarget; absolute ones replace it.
      if [ "${link:0:1}" != "/"  ]; then
        newtarget="${newtarget}/${link}" # relative
      else
        newtarget="${link}" # absolute
      fi
    else # Regular file component.
      newtarget="${newtarget}/${part}"
    fi
    IFS='/'
  done

  IFS=$OIFS
  echo $newtarget
}

follow() {
  # Portable 'readlink -f' function to follow a file's links to the final
  # target.  Calls follow_one recursively til we're finished tracing symlinks.

  target=$1
  depth=$2

  if [ -z "$depth" ]; then
    depth=0
  elif [ "$depth" == "1000" ]; then
    # Don't recurse indefinitely; we've probably hit a symlink cycle.
    # Just bail out here.
    echo $target
    return 1
  fi

  # Canonicalize the target to be an absolute path.
  targetdir=`dirname ${target}`
  targetdir=`cd ${targetdir} && pwd`
  target=${targetdir}/`basename ${target}`

  # Use follow_one to resolve links. Test that we get the same result twice,
  # to terminate iteration.
  first=`follow_one ${target}`
  second=`follow_one ${first}`
  if [ "${first}" == "${second}" ]; then
    # We're done.
    echo "${second}"
  else
    # Need to continue resolving links.
    echo `follow ${second} $(( $depth + 1 ))`
  fi
}

# Resolve bin directory recursively following symlinks, etc.
prgm=`follow $0`
bin=`dirname ${prgm}`
bin=`cd ${bin} && pwd`

projectroot=`cd "${bin}/.." && pwd`

MVN_TARGET_DIR="${projectroot}/target"
MVN_BUILD_DEPS_DIR="${MVN_TARGET_DIR}/dependency"

export FLUMEBASE_HOME=${FLUMEBASE_HOME:-${projectroot}}
export FLUMEBASE_CONF_DIR=${FLUMEBASE_CONF_DIR:-"${FLUMEBASE_HOME}/etc"}

if [ ! -f ${FLUMEBASE_CONF_DIR}/flumebase-env.sh ]; then
  if [ -f ${FLUMEBASE_CONF_DIR}/flumebase-env.sh.template ]; then
    echo "First time using FlumeBase? Let me do a bit of setup..."
    echo "Copying ${FLUMEBASE_CONF_DIR}/flumebase-env.sh.template to flumebase-env.sh"
    cp ${FLUMEBASE_CONF_DIR}/flumebase-env.sh.template ${FLUMEBASE_CONF_DIR}/flumebase-env.sh
  else
    echo "Could not find flumebase-env.sh"
    echo "Make sure \$FLUMEBASE_HOME or \$FLUMEBASE_CONF_DIR is set correctly."
    exit 1
  fi
fi

source ${FLUMEBASE_CONF_DIR}/flumebase-env.sh

LIB_DIR="${FLUMEBASE_HOME}/lib"

function usage() {
  echo "Usage: flumebase <command> [args...]"
  echo "Commands include:"
  echo "  shell       Start the FlumeBase shell"
  echo ""
  echo "  start       Start a daemon server to run persistent queries"
  echo "  server      Start a server as a foreground process"
  echo "  stop        Stop a running server"
  echo ""
  echo "  classpath   Print the classpath used by Java executables and exit"
  echo "  version     Print FlumeBase version information and exit"
}

function add_to_classpath() {
  dir=$1
  if [ ! -d "${dir}" ]; then
    return 0
  fi
  for jar in `ls "${dir}"`; do
    if [ -z "$FLUMEBASE_CLASSPATH" ]; then
      FLUMEBASE_CLASSPATH="${dir}/${jar}"
    else
      FLUMEBASE_CLASSPATH="${FLUMEBASE_CLASSPATH}:${dir}/${jar}"
    fi
  done
}
# name of script
BINPATH=`dirname $0`

if [ -f "${BINPATH}/flumebase-env.sh" ]; then
    source "$BINPATH/flumebase-env.sh"
fi


function create_missing_dir() {
  dirname=$1

  # Create the directory identified if it does not exist already.
  if [ ! -z "$dirname" -a ! -d "$dirname" ]; then
    if [ -e "$dirname" ]; then
      echo "Warning: $dirname exists but is not a directory"
      return 1
    fi
    mkdir -p $dirname
  fi
}


# If no lib dir exists and no dependency dir exists, then
# try to use mvn to retrieve dependencies.
if [ \( ! -d "${LIB_DIR}" \) -a \( ! -d "${MVN_BUILD_DEPS_DIR}" \) ]; then
  which mvn 2>&1 >/dev/null
  ret=$?
  if [ "${ret}" == 0 ]; then
    pushd "${projectroot}"
    echo "Retrieving dependencies via mvn"
    mvn dependency:copy-dependencies
    mvnret=$?
    if [ "${mvnret}" != 0 ]; then
      echo "WARNING: It looks like you're running from a development branch, but"
      echo "I couldn't retrieve dependencies via mvn. If an unmet dependency is"
      echo "required at runtime, it will probably explode."
    fi
    popd
  else
    echo "WARNING: Couldn't find any dependencies. mvn doesn't seem to be"
    echo "installed, so I don't know how to get them, either. This will"
    echo "probably explode."
  fi
fi

add_to_classpath "${MVN_BUILD_DEPS_DIR}"
add_to_classpath "${LIB_DIR}"

# Get Flume's classpath dependencies from Flume itself, and put Flume (and
# via this, Hadoop) directly on the classpath; we don't redistribute Flume
# with FlumeBase; it's marked as a 'provided' dependency.
if [ -x "${FLUME_HOME}/bin/flume" ]; then
  flume_classpath=`${FLUME_HOME}/bin/flume classpath`
  if [ ! -z "${flume_classpath}" ]; then
    # Add these to our classpath.
    FLUMEBASE_CLASSPATH="${FLUMEBASE_CLASSPATH}:${flume_classpath}"
  fi
else
  echo "Warning: Couldn't find Flume installation. Make sure \$FLUME_HOME is set."
  exit 1
fi

if [ -d "${MVN_TARGET_DIR}/classes" ]; then
  # If there's a target/classes/ dir, then we want to put this ahead of any
  # jars on the classpath; use the most recently compiled bits.
  FLUMEBASE_CLASSPATH="${MVN_TARGET_DIR}/classes:$FLUMEBASE_CLASSPATH"
fi

export FLUMEBASE_CLASSPATH

foreground=true

# Invocation format: flumebase <command> [args...]
action="$1"
shift
if [ -z "$action" ]; then
  usage
  exit 0
elif [ "$action" == "shell" ]; then
  FLUMEBASE_MAIN_CLASS=com.odiago.flumebase.client.CmdLineClient
elif [ "$action" == "server" ]; then
  create_missing_dir $FLUMEBASE_PID_DIR
  FLUMEBASE_MAIN_CLASS=com.odiago.flumebase.server.ServerMain
elif [ "$action" == "version" ]; then
  FLUMEBASE_MAIN_CLASS=com.odiago.flumebase.util.VersionInfo
elif [ "$action" == "start" ]; then
  FLUMEBASE_MAIN_CLASS=com.odiago.flumebase.server.ServerMain
  create_missing_dir $FLUMEBASE_LOG_DIR
  create_missing_dir $FLUMEBASE_PID_DIR
  foreground=false
  export FLUMEBASE_OPTS="-Dlog4j.rootLogger=INFO,drfa \
-Dflumebase.log.dir=$FLUMEBASE_LOG_DIR $FLUMEBASE_OPTS"
elif [ "$action" == "stop" ]; then
  if [ ! -f "$FLUMEBASE_PID_DIR/flumebase.pid" ]; then
    echo "Cannot find pid file. No FlumeBase instance running?"
    exit 1
  fi
  PID=`cat $FLUMEBASE_PID_DIR/flumebase.pid`
  if [ -z "$PID" ]; then
    echo "No PID in pid file? Cannot stop server."
    exit 1
  fi
  echo "Stopping server..."
  kill $PID
  ret=$?
  if [ "$ret" != "0" ]; then
    echo "Error killing process with pid $PID"
    exit 1
  fi
  echo "Waiting for shutdown..."
  tries=5
  while [ "$tries" -gt 0 ]; do
    tries=$(($tries - 1))
    ps ef | grep "^$PID" 2>&1 > /dev/null
    ret=$?
    if [ "$ret" != 0 ]; then
      break
    fi
    sleep 2
  done
  ps ef | grep "^$PID" 2>&1 > /dev/null
  ret=$?
  if [ "$ret" == 0 ]; then
    echo "Kill signal sent but server did not shut down within timeout."
    exit 1
  fi
  # FlumeBase will delete its own pid file.
  echo "FlumeBase server shutdown."
  exit 0
elif [ "$action" == "classpath" ]; then
  echo "$FLUMEBASE_CLASSPATH"
  exit 0
else
  echo "Invalid command: $action"
  usage
  exit 1
fi

if $foreground ; then
  exec java -cp "${FLUMEBASE_CLASSPATH}" \
      -Dflumebase.conf.dir="${FLUMEBASE_CONF_DIR}" \
      -Xmx${FLUMEBASE_HEAP_SIZE}m \
      $FLUMEBASE_OPTS \
      "${FLUMEBASE_MAIN_CLASS}" "$@"
else      
  nohup java -cp "${FLUMEBASE_CLASSPATH}" \
      -Dflumebase.conf.dir="${FLUMEBASE_CONF_DIR}" \
      -Xmx${FLUMEBASE_HEAP_SIZE}m \
      $FLUMEBASE_OPTS \
      "${FLUMEBASE_MAIN_CLASS}" "$@" >/dev/null 2>&1 </dev/null &
fi

