#!/bin/bash
#
# Licensed to Odiago, Inc. under one or more contributor license
# agreements.  See the NOTICE.txt file distributed with this work for
# additional information regarding copyright ownership.  Odiago, Inc.
# licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#

# TODO: Follow symlinks and resolve this back to its full name
# (e.g., 'readlink -f' -- which is Linux-specific).
bin=`dirname $0`
bin=`cd "${bin}" && pwd`

projectroot=`cd "${bin}/.." && pwd`

LIB_DIR="${projectroot}/lib"
MVN_TARGET_DIR="${projectroot}/target"
MVN_BUILD_DEPS_DIR="${MVN_TARGET_DIR}/dependency"

# CDH installation default for Flume.
FLUME_HOME=${FLUME_HOME:-/usr/lib/flume}

FLUMEBASE_CLASSPATH="${FLUMEBASE_CLASSPATH:-}"
FLUMEBASE_OPTS="${FLUMEBASE_OPTS:-}"
FLUMEBASE_CONF_DIR=${FLUMEBASE_CONF_DIR:-"${projectroot}/etc"}

function usage() {
  echo "Usage: flumebase <command> [args...]"
  echo "Commands include:"
  echo "  shell       Start the FlumeBase shell"
  echo "  server      Start a server to run persistent queries"
  echo ""
  echo "  classpath   Print the classpath used by Java executables and exit"
  echo "  version     Print FlumeBase version information and exit"
}

function add_to_classpath() {
  dir=$1
  if [ ! -d "${dir}" ]; then
    return 0
  fi
  for jar in `ls "${dir}"`; do
    if [ -z "$FLUMEBASE_CLASSPATH" ]; then
      FLUMEBASE_CLASSPATH="${dir}/${jar}"
    else
      FLUMEBASE_CLASSPATH="${FLUMEBASE_CLASSPATH}:${dir}/${jar}"
    fi
  done
}
# name of script
BINPATH=`dirname $0`

if [ -f "${BINPATH}/flumebase-env.sh" ]; then
    source "$BINPATH/flumebase-env.sh"
fi


# If no lib dir exists and no dependency dir exists, then
# try to use mvn to retrieve dependencies.
if [ \( ! -d "${LIB_DIR}" \) -a \( ! -d "${MVN_BUILD_DEPS_DIR}" \) ]; then
  which mvn 2>&1 >/dev/null
  ret=$?
  if [ "${ret}" == 0 ]; then
    pushd "${projectroot}"
    echo "Retrieving dependencies via mvn"
    mvn dependency:copy-dependencies
    mvnret=$?
    if [ "${mvnret}" != 0 ]; then
      echo "WARNING: It looks like you're running from a development branch, but"
      echo "I couldn't retrieve dependencies via mvn. If an unmet dependency is"
      echo "required at runtime, it will probably explode."
    fi
    popd
  else
    echo "WARNING: Couldn't find any dependencies. mvn doesn't seem to be"
    echo "installed, so I don't know how to get them, either. This will"
    echo "probably explode."
  fi
fi

add_to_classpath "${MVN_BUILD_DEPS_DIR}"
add_to_classpath "${LIB_DIR}"

# Get Flume's classpath dependencies from Flume itself, and put Flume (and
# via this, Hadoop) directly on the classpath; we don't redistribute Flume
# with FlumeBase; it's marked as a 'provided' dependency.
if [ -x "${FLUME_HOME}/bin/flume" ]; then
  flume_classpath=`${FLUME_HOME}/bin/flume classpath`
  if [ ! -z "${flume_classpath}" ]; then
    # Add these to our classpath.
    FLUMEBASE_CLASSPATH="${FLUMEBASE_CLASSPATH}:${flume_classpath}"
  fi
else
  echo "Warning: Couldn't find Flume installation. Make sure \$FLUME_HOME is set."
  exit 1
fi

if [ -d "${MVN_TARGET_DIR}/classes" ]; then
  # If there's a target/classes/ dir, then we want to put this ahead of any
  # jars on the classpath; use the most recently compiled bits.
  FLUMEBASE_CLASSPATH="${MVN_TARGET_DIR}/classes:$FLUMEBASE_CLASSPATH"
fi

# Invocation format: flumebase <command> [args...]
action="$1"
shift
if [ -z "$action" ]; then
  usage
  exit 0
elif [ "$action" == "shell" ]; then
  FLUMEBASE_MAIN_CLASS=com.odiago.flumebase.client.CmdLineClient
elif [ "$action" == "server" ]; then
  FLUMEBASE_MAIN_CLASS=com.odiago.flumebase.server.ServerMain
elif [ "$action" == "version" ]; then
  FLUMEBASE_MAIN_CLASS=com.odiago.flumebase.util.VersionInfo
elif [ "$action" == "classpath" ]; then
  echo "$FLUMEBASE_CLASSPATH"
  exit 0
else
  echo "Invalid command: $action"
  usage
  exit 1
fi

exec java -cp "${FLUMEBASE_CLASSPATH}" \
    -Dflumebase.conf.dir="${FLUMEBASE_CONF_DIR}" \
    $FLUMEBASE_OPTS \
    "${FLUMEBASE_MAIN_CLASS}" "$@"

